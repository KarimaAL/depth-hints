# -*- coding: utf-8 -*-
"""Copie de not for commercial purposes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/KarimaAL/depth-hints/blob/master/Copie_de_not_for_commercial_purposes.ipynb
"""


#.........................................Explaining the project step by step:..................................

# Commented out IPython magic to ensure Python compatibility.
from __future__ import absolute_import, division, print_function
# %matplotlib inline

import os
import numpy as np
import PIL.Image as pil
import matplotlib.pyplot as plt

import torch
from torchvision import transforms

import networks
from utils import download_model_if_doesnt_exist
import re 
import cv2
import glob
from PIL import Image

import re 
import cv2
import glob
from PIL import Image

model_name = "mono_640x192"

download_model_if_doesnt_exist(model_name)
encoder_path = os.path.join("models", model_name, "encoder.pth")
depth_decoder_path = os.path.join("models", model_name, "depth.pth")

# LOADING PRETRAINED MODEL
encoder = networks.ResnetEncoder(18, False)
depth_decoder = networks.DepthDecoder(num_ch_enc=encoder.num_ch_enc, scales=range(4))

loaded_dict_enc = torch.load(encoder_path, map_location='cpu')
filtered_dict_enc = {k: v for k, v in loaded_dict_enc.items() if k in encoder.state_dict()}
encoder.load_state_dict(filtered_dict_enc)

loaded_dict = torch.load(depth_decoder_path, map_location='cpu')
depth_decoder.load_state_dict(loaded_dict)

encoder.eval()
depth_decoder.eval();

img_dir = "/content/drive/My Drive/VIDEO PEDESTRIAN" # Enter Directory of all images 

data_path = os.path.join(img_dir,'*g')
files = glob.glob(data_path)

dirFiles = files
dirFiles.sort( key=lambda f: int(re.sub('\D', '', f)),)
print(dirFiles)
data = []
pic_num = 1
for f1 in dirFiles:
    img = cv2.imread(f1)
        
    input_image = Image.open(f1).convert('RGB')
    original_width, original_height = input_image.size
    feed_height = loaded_dict_enc['height']
    feed_width = loaded_dict_enc['width']

    print(input_image.size)

    input_image_resized = input_image.resize((feed_width, feed_height), pil.LANCZOS)

    input_image_pytorch = transforms.ToTensor()(input_image_resized).unsqueeze(0)

    pic_num = pic_num + 1

